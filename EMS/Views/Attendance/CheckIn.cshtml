@model EMS.Models.Attendance.CheckInViewModel

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<style>
    body {
        background: linear-gradient(to right, #74ebd5, #acb6e5);
        font-family: Arial, sans-serif;
    }

    .container {
        max-width: 700px;
        margin-top: 20px;
        padding: 20px;
        background: #fff;
        border-radius: 15px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
    }

    .video-container, .photo-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    video, #photo {
        width: 100%;
        max-width: 300px;
        border-radius: 10px;
        border: 2px solid #007bff;
    }

    #photo {
        border: 2px solid #28a745;
        display: none;
    }

    .btn-custom {
        width: 100%;
        margin-top: 10px;
        padding: 10px;
        font-size: 16px;
        font-weight: bold;
        border-radius: 8px;
        transition: 0.3s;
    }

        .btn-custom:hover {
            transform: scale(1.05);
            opacity: 0.9;
        }

    .loading {
        display: none;
        font-size: 16px;
        color: #dc3545;
        font-weight: bold;
    }

    footer {
        display: none !important;
    }
</style>

<div class="container">
    <h3 class="text-center text-primary">Check In/Out</h3>

    <!-- Hiển thị trạng thái check-in -->
    <p class="text-center font-weight-bold @(Model.IsCheckedIn ? "text-success" : "text-danger")">
        @(Model.IsCheckedIn
            ? $"✅ Bạn đã check-in vào lúc {Model.CheckIn?.ToString("T")}"
            : "❌ Bạn chưa check-in hôm nay")
    </p>
    <p class="text-center font-weight-bold @(Model.CheckOut.HasValue ? "text-success" : "text-danger")">
        @(Model.CheckOut.HasValue
            ? $"✅ Bạn đã check-out vào lúc {Model.CheckOut?.ToString("T")}"
            : "❌ Bạn chưa check-out hôm nay")
    </p>
    <div class="@(Model.CheckIn.HasValue && Model.CheckOut.HasValue ? "d-none" : "")">
        <div class="row">
            <!-- Cột Video -->
            <div class="col-md-6 video-container">
                <video id="video" autoplay></video>
                <canvas id="canvas" style="display: none;"></canvas>
            </div>

            <!-- Cột Ảnh chụp và Nút bấm -->
            <div class="col-md-6 photo-container text-center">
                <img id="photo" class="img-thumbnail" style="max-width: 100%; display: none;" />

                <input type="hidden" id="imageData" name="ImageData" />
                <button type="button" id="capture" class="btn btn-primary btn-custom mt-2">📷 Take Photo</button>
                <button type="button" id="submit" class="btn btn-success btn-custom mt-2" disabled>📤 Check</button>
                <p class="loading" id="loading" style="display: none;">Loading...</p>
            </div>
        </div>
        <p class="mt-3 text-center text-muted">Make sure your face is clear when taking the photo.</p>
    </div>
</div>

<script>
    const video = document.getElementById("video");
    const canvas = document.getElementById("canvas");
    const photo = document.getElementById("photo");
    const captureButton = document.getElementById("capture");
    const submitButton = document.getElementById("submit");
    const loadingText = document.getElementById("loading");
    const imageDataInput = document.getElementById("imageData");

    // Bật webcam
    navigator.mediaDevices.getUserMedia({ video: true })
        .then(stream => {
            video.srcObject = stream;
        })
        .catch(err => {
            console.error("Lỗi truy cập webcam: ", err);
            alert("Không thể truy cập camera!");
        });

    // Chụp ảnh
    captureButton.addEventListener("click", () => {
        const context = canvas.getContext("2d");
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        context.drawImage(video, 0, 0, canvas.width, canvas.height);
        const imageData = canvas.toDataURL("image/jpeg");

        photo.src = imageData;
        photo.style.display = "block";
        imageDataInput.value = imageData; // Gán dữ liệu ảnh vào input hidden
        submitButton.disabled = false;
    });

    // Gửi dữ liệu check-in/check-out bằng Fetch API
    submitButton.addEventListener("click", () => {
        loadingText.style.display = "block";
        submitButton.disabled = true;

        fetch("/Attendance/SubmitCheck", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                UserId: @Model.UserId,
                IsCheckOut: @((Model.IsCheckedIn ? "true" : "false").ToLower()),
                ImageData: imageDataInput.value
            })
        })
            .then(response => response.json())
            .then(data => {
                loadingText.style.display = "none";
                if (data.success) {
                    alert("Check-in/Check-out thành công!");
                    location.reload();
                } else {
                    alert("Lỗi khi thực hiện check-in/check-out!");
                    submitButton.disabled = false;
                }
            })
            .catch(error => {
                loadingText.style.display = "none";
                console.error("Lỗi gửi dữ liệu:", error);
                alert("Có lỗi xảy ra, vui lòng thử lại!");
                submitButton.disabled = false;
            });
    });
</script>
